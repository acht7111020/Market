#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('market:server');
var http = require('http');
var Chat = require('../models/chatSchema');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

users = {};
connections = [];

io.sockets.on('connection', function(socket){
  connections.push(socket);
  console.log('Connected: %s sockets connected', connections.length);

  socket.on('new user', function(data, callback) {
    socket.email = data;
    users[socket.email] = socket;
  });
  // Disconnect
  socket.on('disconnect', function(data){
    delete users[socket.email];
    connections.splice(connections.indexOf(socket), 1);
    console.log('Disconnected: %s sockets connected', connections.length);
  });

  // SendMessage
  socket.on('send message', function(data){
    var newMsg = new Chat({fromUser: data.origin, toUser: data.target, msg: data.content, read: false});
    newMsg.save(function(err){
      if(err) throw err;
      if (users[data.target])
        users[data.target].emit('new message', {msg: data.content, origin: data.origin});
    });
  });

  socket.on('open chat box', function(data){
    var findQuery = Chat.find({$or:[ {fromUser: data.self, toUser: data.friend}, {fromUser: data.friend, toUser: data.self} ]});
    findQuery.sort('-created').limit(15).exec(function(err, docs){
      if(err) throw err;
      socket.emit('load old messages', {history: docs});
    });
    UpdateReadStat(data);
  });

  socket.on('message read', function(data) {
    UpdateReadStat(data);
  });

  function UpdateReadStat(data){
    var updateQuery = Chat.update(
      {$or:[{fromUser: data.friend, toUser: data.self, read: false} ]},
      {$set: {read: true}},
      {multi: true}
    );
    updateQuery.exec(function(err, affected){
      console.log(`set ${affected.nModified} messages read`);
      if (users[data.friend])
        users[data.friend].emit('update message read', {friend: data.self});
    });
  }
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
